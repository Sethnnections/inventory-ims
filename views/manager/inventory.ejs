
    <!-- DataTables CSS -->
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.bootstrap5.min.css">
 
  <div class="container-fluid py-2">
        <!-- Page Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <p class="text-muted mb-0">Track and manage your product inventory levels</p>
                            </div>
                            <div class="col-md-6 text-end">
                                <button class="btn btn-primary-custom" data-bs-toggle="modal" data-bs-target="#adjustStockModal">
                                    <i class="fas fa-warehouse me-2"></i>Adjust Stock
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Inventory Statistics -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card inventory-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title text-muted">Total Products</h6>
                                <h3 id="totalProducts" class="mb-0">0</h3>
                            </div>
                            <div class="align-self-center">
                                <i class="fas fa-boxes text-primary fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card inventory-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title text-muted">In Stock</h6>
                                <h3 id="inStockCount" class="mb-0 status-in-stock">0</h3>
                            </div>
                            <div class="align-self-center">
                                <i class="fas fa-check-circle text-success fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card inventory-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title text-muted">Low Stock</h6>
                                <h3 id="lowStockCount" class="mb-0 status-low-stock">0</h3>
                            </div>
                            <div class="align-self-center">
                                <i class="fas fa-exclamation-triangle text-warning fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card inventory-card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h6 class="card-title text-muted">Out of Stock</h6>
                                <h3 id="outOfStockCount" class="mb-0 status-out-of-stock">0</h3>
                            </div>
                            <div class="align-self-center">
                                <i class="fas fa-times-circle text-danger fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Search and Filters -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <div class="row g-3 align-items-end">
                            <div class="col-md-4">
                                <label class="form-label">Search Inventory</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-light border-end-0">
                                        <i class="fas fa-search text-muted"></i>
                                    </span>
                                    <input type="text" class="form-control border-start-0" id="searchInventory" placeholder="Search by product name...">
                                </div>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Category</label>
                                <select class="form-select" id="categoryFilter">
                                    <option value="">All Categories</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Stock Status</label>
                                <select class="form-select" id="statusFilter">
                                    <option value="">All Status</option>
                                    <option value="in-stock">In Stock</option>
                                    <option value="low-stock">Low Stock</option>
                                    <option value="out-of-stock">Out of Stock</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <button class="btn btn-outline-secondary w-100" id="resetFilters">
                                    <i class="fas fa-refresh me-2"></i>Reset
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Export Buttons -->
        <div class="row mb-3">
            <div class="col-12">
                <div class="export-buttons">
                    <div class="btn-group">
                        <button class="btn btn-success" id="exportExcel">
                            <i class="fas fa-file-excel me-2"></i>Export Excel
                        </button>
                        <button class="btn btn-danger" id="exportPDF">
                            <i class="fas fa-file-pdf me-2"></i>Export PDF
                        </button>
                        <button class="btn btn-info" id="exportCSV">
                            <i class="fas fa-file-csv me-2"></i>Export CSV
                        </button>
                        <button class="btn btn-warning" id="printTable">
                            <i class="fas fa-print me-2"></i>Print
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Inventory Table -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-list text-gold me-2"></i>
                            Inventory List
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table id="inventoryTable" class="table table-hover table-striped">
                                <thead class="table-light">
                                    <tr>
                                        <th>Product</th>
                                        <th>Category</th>
                                        <th>Current Stock</th>
                                        <th>Status</th>
                                        <th>Last Updated</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Inventory will be populated dynamically -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Adjust Stock Modal -->
    <div class="modal fade" id="adjustStockModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Adjust Stock Level</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form id="adjustStockForm">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Select Product *</label>
                            <select class="form-select" name="product" id="adjustStockProduct" required>
                                <option value="">Select Product</option>
                            </select>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Current Quantity</label>
                            <p class="form-control-plaintext fw-bold" id="currentQuantityDisplay">-</p>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">New Quantity *</label>
                            <input type="number" class="form-control" name="quantity" min="0" required>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Adjustment Reason</label>
                            <textarea class="form-control" name="reason" rows="3" placeholder="Reason for stock adjustment..."></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary-custom">Update Stock</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Quick Stock Update Modal -->
    <div class="modal fade" id="quickUpdateModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Quick Stock Update</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form id="quickUpdateForm">
                    <input type="hidden" id="quickUpdateProductId" name="product">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Product</label>
                            <p class="form-control-plaintext fw-bold" id="quickUpdateProductName">-</p>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Current Quantity</label>
                            <p class="form-control-plaintext" id="quickUpdateCurrentQuantity">-</p>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Adjustment Type *</label>
                                    <select class="form-select" name="adjustmentType" id="adjustmentType" required>
                                        <option value="set">Set Exact Quantity</option>
                                        <option value="add">Add Stock</option>
                                        <option value="remove">Remove Stock</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Quantity *</label>
                                    <input type="number" class="form-control" name="quantity" min="1" required>
                                </div>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label">Reason</label>
                            <textarea class="form-control" name="reason" rows="2" placeholder="Reason for adjustment..."></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary-custom">Update Stock</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Inventory Details Modal -->
    <div class="modal fade" id="inventoryDetailsModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Inventory Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-4 text-center">
                            <img id="detailProductImage" src="" class="img-fluid rounded mb-3" alt="Product Image" style="max-height: 200px;">
                            <h4 id="detailProductName" class="mb-1">-</h4>
                            <p id="detailProductCategory" class="text-muted">-</p>
                        </div>
                        <div class="col-md-8">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="card mb-3">
                                        <div class="card-body text-center">
                                            <h6 class="card-title text-muted">Current Stock</h6>
                                            <h3 id="detailCurrentStock" class="mb-0">-</h3>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="card mb-3">
                                        <div class="card-body text-center">
                                            <h6 class="card-title text-muted">Status</h6>
                                            <h4 id="detailStockStatus" class="mb-0">-</h4>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-12">
                                    <div class="card">
                                        <div class="card-body">
                                            <h6 class="card-title">Product Information</h6>
                                            <p><strong>Description:</strong> <span id="detailProductDescription">-</span></p>
                                            <p><strong>Price:</strong> MK <span id="detailProductPrice">-</span></p>
                                            <p><strong>Last Updated:</strong> <span id="detailLastUpdated">-</span></p>
                                            <p><strong>Created:</strong> <span id="detailCreatedAt">-</span></p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary-custom" onclick="quickUpdateFromDetails()">Update Stock</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.1/js/dataTables.buttons.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.bootstrap5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.html5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.print.min.js"></script>

    <script>
        // Global variables
        let categories = [];
        let products = [];
        let inventoryData = [];
        let dataTable = null;
        let currentProductDetails = null;

        // Initialize page
        $(document).ready(function() {
            console.log('Inventory Management Page Ready');
            loadInventoryData();
            loadCategories();
            loadProducts();
            initializeEventHandlers();
        });

        // Load inventory data
        function loadInventoryData() {
            // First, get all products to build inventory view
            $.ajax({
                url: '/api/product/getproducts',
                type: 'GET',
                cache: false,
                success: function(response) {
                    const productItems = Array.isArray(response)
                        ? response
                        : ((response && (response.products || response.Products || response.data || response.items)) || []);
                    
                    console.log('Loaded products for inventory:', productItems.length);
                    products = productItems;
                    
                    // Now get inventory data if available
                    loadInventoryFromAPI(productItems);
                },
                error: function(xhr) {
                    console.error('Error loading products for inventory:', xhr);
                    showAlert('Error loading inventory data', 'danger');
                }
            });
        }

        // Load inventory from API
        function loadInventoryFromAPI(productItems) {
            $.ajax({
                url: '/api/inventory',
                type: 'GET',
                success: function(response) {
                    const inventoryItems = response.inventories || [];
                    console.log('Loaded inventory data:', inventoryItems.length);
                    
                    // Merge product data with inventory data
                    const mergedData = productItems.map(product => {
                        const inventory = inventoryItems.find(inv => inv.product && inv.product._id === product._id);
                        return {
                            ...product,
                            inventory: inventory || {
                                quantity: product.quantity || 0,
                                status: getStockStatus(product.quantity || 0),
                                lastUpdated: product.updatedAt || product.createdAt
                            }
                        };
                    });
                    
                    inventoryData = mergedData;
                    populateInventoryTable(mergedData);
                    updateStatistics(mergedData);
                },
                error: function(xhr) {
                    console.error('Error loading inventory from API, using product data:', xhr);
                    // If inventory API fails, use product data
                    const mergedData = productItems.map(product => ({
                        ...product,
                        inventory: {
                            quantity: product.quantity || 0,
                            status: getStockStatus(product.quantity || 0),
                            lastUpdated: product.updatedAt || product.createdAt
                        }
                    }));
                    
                    inventoryData = mergedData;
                    populateInventoryTable(mergedData);
                    updateStatistics(mergedData);
                }
            });
        }

        // Load categories for dropdown
        function loadCategories() {
            $.ajax({
                url: '/api/category/getcategory',
                type: 'GET',
                success: function(response) {
                    categories = response.categoriesWithCount || [];
                    populateCategoryFilter();
                },
                error: function(xhr) {
                    console.error('Error loading categories:', xhr);
                }
            });
        }

        // Load products for dropdown
        function loadProducts() {
            $.ajax({
                url: '/api/product/getproducts',
                type: 'GET',
                success: function(response) {
                    const productItems = Array.isArray(response)
                        ? response
                        : ((response && (response.products || response.Products || response.data || response.items)) || []);
                    populateProductDropdown(productItems);
                },
                error: function(xhr) {
                    console.error('Error loading products for dropdown:', xhr);
                }
            });
        }

        // Populate inventory table
        function populateInventoryTable(data) {
            const tbody = $('#inventoryTable tbody');
            tbody.empty();

            if (data.length === 0) {
                tbody.append('<tr><td colspan="6" class="text-center py-4">No inventory data found</td></tr>');
                initializeDataTable([]);
                return;
            }

            data.forEach(function(item) {
                const inventory = item.inventory || {};
                const statusClass = getStatusClass(inventory.status);
                const stockLevel = inventory.quantity || 0;
                
                const imageHtml = item.image ? 
                    '<img src="' + item.image + '" alt="' + (item.name || '') + '" class="product-image">' : 
                    '<div class="product-image bg-light d-flex align-items-center justify-content-center"><i class="fas fa-box text-muted"></i></div>';
                
                const row = '<tr data-id="' + item._id + '" data-category="' + (item.Category ? item.Category._id : '') + '" data-status="' + inventory.status + '">' +
                    '<td>' +
                        '<div class="d-flex align-items-center">' +
                            imageHtml +
                            '<div class="ms-3">' +
                                '<h6 class="mb-0">' + (item.name || '') + '</h6>' +
                                '<small class="text-muted">' + (item.Description || item.Desciption || 'No description') + '</small>' +
                            '</div>' +
                        '</div>' +
                    '</td>' +
                    '<td>' + (item.Category ? item.Category.name : 'Uncategorized') + '</td>' +
                    '<td>' +
                        '<span class="fw-bold">' + stockLevel + '</span>' +
                        '<div class="progress mt-1" style="height: 6px;">' +
                            '<div class="progress-bar ' + getProgressBarClass(stockLevel) + '" style="width: ' + getProgressBarWidth(stockLevel) + '%"></div>' +
                        '</div>' +
                    '</td>' +
                    '<td><span class="' + statusClass + '">' + getStatusText(inventory.status) + '</span></td>' +
                    '<td>' + (inventory.lastUpdated ? new Date(inventory.lastUpdated).toLocaleDateString() : '-') + '</td>' +
                    '<td class="action-buttons">' +
                        '<button class="btn btn-sm btn-outline-info me-1" onclick="viewInventoryDetails(\'' + item._id + '\')"><i class="fas fa-eye"></i></button>' +
                        '<button class="btn btn-sm btn-outline-primary me-1" onclick="quickUpdateStock(\'' + item._id + '\', \'' + (item.name || '').replace(/'/g, "\\'") + '\', ' + stockLevel + ')"><i class="fas fa-edit"></i></button>' +
                        '<button class="btn btn-sm btn-outline-warning" onclick="loadStockHistory(\'' + item._id + '\')"><i class="fas fa-history"></i></button>' +
                    '</td></tr>';
                
                tbody.append(row);
            });

            initializeDataTable(data);
        }

        // Initialize DataTable
        function initializeDataTable(data) {
            if (dataTable) {
                dataTable.destroy();
            }

            dataTable = $('#inventoryTable').DataTable({
                pageLength: 10,
                lengthMenu: [10, 25, 50, 100],
                order: [[4, 'desc']],
                responsive: true,
                searching: true,
                dom: '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>' +
                     '<"row"<"col-sm-12"tr>>' +
                     '<"row"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>',
                language: {
                    emptyTable: "No inventory data available",
                    info: "Showing _START_ to _END_ of _TOTAL_ items",
                    infoEmpty: "Showing 0 to 0 of 0 items",
                    infoFiltered: "(filtered from _MAX_ total items)",
                    lengthMenu: "Show _MENU_ items",
                    search: "Search:",
                    paginate: {
                        first: "First",
                        last: "Last",
                        next: "Next",
                        previous: "Previous"
                    }
                },
                buttons: [
                    {
                        extend: 'excel',
                        text: '<i class="fas fa-file-excel me-2"></i>Excel',
                        className: 'btn btn-success',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4]
                        }
                    },
                    {
                        extend: 'pdf',
                        text: '<i class="fas fa-file-pdf me-2"></i>PDF',
                        className: 'btn btn-danger',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4]
                        }
                    },
                    {
                        extend: 'csv',
                        text: '<i class="fas fa-file-csv me-2"></i>CSV',
                        className: 'btn btn-info',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4]
                        }
                    },
                    {
                        extend: 'print',
                        text: '<i class="fas fa-print me-2"></i>Print',
                        className: 'btn btn-warning',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4]
                        }
                    }
                ]
            });

            dataTable.buttons().container().appendTo('#inventoryTable_wrapper .col-md-6:eq(0)');
        }

        // Update statistics
        function updateStatistics(data) {
            const total = data.length;
            const inStock = data.filter(item => item.inventory.status === 'in-stock').length;
            const lowStock = data.filter(item => item.inventory.status === 'low-stock').length;
            const outOfStock = data.filter(item => item.inventory.status === 'out-of-stock').length;

            $('#totalProducts').text(total);
            $('#inStockCount').text(inStock);
            $('#lowStockCount').text(lowStock);
            $('#outOfStockCount').text(outOfStock);
        }

        // Get stock status
        function getStockStatus(quantity) {
            if (quantity === 0) return 'out-of-stock';
            if (quantity < 10) return 'low-stock';
            return 'in-stock';
        }

        // Get status class
        function getStatusClass(status) {
            switch(status) {
                case 'in-stock': return 'status-in-stock';
                case 'low-stock': return 'status-low-stock';
                case 'out-of-stock': return 'status-out-of-stock';
                default: return '';
            }
        }

        // Get status text
        function getStatusText(status) {
            switch(status) {
                case 'in-stock': return 'In Stock';
                case 'low-stock': return 'Low Stock';
                case 'out-of-stock': return 'Out of Stock';
                default: return status;
            }
        }

        // Get progress bar class
        function getProgressBarClass(quantity) {
            if (quantity === 0) return 'bg-danger';
            if (quantity < 10) return 'bg-warning';
            return 'bg-success';
        }

        // Get progress bar width
        function getProgressBarWidth(quantity) {
            const max = 100; // You can adjust this based on your max expected quantity
            return Math.min((quantity / max) * 100, 100);
        }

        // Populate category filter
        function populateCategoryFilter() {
            const filterSelect = $('#categoryFilter');
            filterSelect.empty();
            filterSelect.append('<option value="">All Categories</option>');
            
            categories.forEach(function(category) {
                filterSelect.append('<option value="' + category._id + '">' + category.name + '</option>');
            });
        }

        // Populate product dropdown
        function populateProductDropdown(productItems) {
            const select = $('#adjustStockProduct');
            select.empty();
            select.append('<option value="">Select Product</option>');
            
            productItems.forEach(function(product) {
                select.append('<option value="' + product._id + '">' + product.name + '</option>');
            });
        }

        // Initialize event handlers
        function initializeEventHandlers() {
            // Search functionality
            $('#searchInventory').on('input', function() {
                if (dataTable) {
                    dataTable.search(this.value).draw();
                }
            });

            // Category filter
            $('#categoryFilter').on('change', function() {
                const categoryId = $(this).val();
                if (dataTable) {
                    if (categoryId) {
                        dataTable.column(1).search(categoryId).draw();
                    } else {
                        dataTable.column(1).search('').draw();
                    }
                }
            });

            // Status filter
            $('#statusFilter').on('change', function() {
                const status = $(this).val();
                if (dataTable) {
                    if (status) {
                        dataTable.column(3).search(status).draw();
                    } else {
                        dataTable.column(3).search('').draw();
                    }
                }
            });

            // Reset filters
            $('#resetFilters').on('click', function() {
                $('#searchInventory').val('');
                $('#categoryFilter').val('');
                $('#statusFilter').val('');
                if (dataTable) {
                    dataTable.search('').columns().search('').draw();
                }
            });

            // Export buttons
            $('#exportExcel').on('click', function() {
                if (dataTable) {
                    dataTable.button('.buttons-excel').trigger();
                }
            });

            $('#exportPDF').on('click', function() {
                if (dataTable) {
                    dataTable.button('.buttons-pdf').trigger();
                }
            });

            $('#exportCSV').on('click', function() {
                if (dataTable) {
                    dataTable.button('.buttons-csv').trigger();
                }
            });

            $('#printTable').on('click', function() {
                if (dataTable) {
                    dataTable.button('.buttons-print').trigger();
                }
            });

            // Adjust stock form
            $('#adjustStockForm').on('submit', handleAdjustStock);
            $('#quickUpdateForm').on('submit', handleQuickUpdate);

            // Product selection change
            $('#adjustStockProduct').on('change', function() {
                const productId = $(this).val();
                if (productId) {
                    const product = products.find(p => p._id === productId);
                    if (product) {
                        const inventoryItem = inventoryData.find(item => item._id === productId);
                        const currentQty = inventoryItem ? (inventoryItem.inventory.quantity || 0) : 0;
                        $('#currentQuantityDisplay').text(currentQty);
                    }
                } else {
                    $('#currentQuantityDisplay').text('-');
                }
            });
        }

        // Handle adjust stock form submission
        function handleAdjustStock(e) {
            e.preventDefault();
            const formData = $(this).serializeArray();
            const payload = {};
            
            formData.forEach(function(field) {
                payload[field.name] = field.value;
            });

            $.ajax({
                url: '/api/inventory',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(payload),
                success: function(response) {
                    $('#adjustStockModal').modal('hide');
                    showAlert('Stock updated successfully!', 'success');
                    loadInventoryData();
                    $('#adjustStockForm')[0].reset();
                    $('#currentQuantityDisplay').text('-');
                },
                error: function(xhr) {
                    showAlert('Error updating stock: ' + (xhr.responseJSON ? xhr.responseJSON.message : 'Unknown error'), 'danger');
                }
            });
        }

        // Handle quick update form submission
        function handleQuickUpdate(e) {
            e.preventDefault();
            const formData = $(this).serializeArray();
            const payload = {};
            const productId = $('#quickUpdateProductId').val();
            
            formData.forEach(function(field) {
                payload[field.name] = field.value;
            });

            const adjustmentType = payload.adjustmentType;
            const quantity = parseInt(payload.quantity);
            const currentQty = parseInt($('#quickUpdateCurrentQuantity').text());

            let newQuantity = currentQty;
            
            switch(adjustmentType) {
                case 'add':
                    newQuantity = currentQty + quantity;
                    break;
                case 'remove':
                    newQuantity = Math.max(0, currentQty - quantity);
                    break;
                case 'set':
                    newQuantity = quantity;
                    break;
            }

            payload.quantity = newQuantity;

            $.ajax({
                url: '/api/inventory',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(payload),
                success: function(response) {
                    $('#quickUpdateModal').modal('hide');
                    showAlert('Stock updated successfully!', 'success');
                    loadInventoryData();
                },
                error: function(xhr) {
                    showAlert('Error updating stock: ' + (xhr.responseJSON ? xhr.responseJSON.message : 'Unknown error'), 'danger');
                }
            });
        }

        // Quick update stock
        function quickUpdateStock(productId, productName, currentQuantity) {
            $('#quickUpdateProductId').val(productId);
            $('#quickUpdateProductName').text(productName);
            $('#quickUpdateCurrentQuantity').text(currentQuantity);
            $('#adjustmentType').val('set');
            $('#quickUpdateForm')[0].reset();
            $('#quickUpdateModal').modal('show');
        }

        // View inventory details
        function viewInventoryDetails(productId) {
            const item = inventoryData.find(item => item._id === productId);
            if (item) {
                currentProductDetails = item;
                const inventory = item.inventory || {};
                
                $('#detailProductImage').attr('src', item.image || '');
                $('#detailProductName').text(item.name || '');
                $('#detailProductCategory').text(item.Category ? item.Category.name : 'Uncategorized');
                $('#detailCurrentStock').text(inventory.quantity || 0);
                $('#detailStockStatus').html('<span class="' + getStatusClass(inventory.status) + '">' + getStatusText(inventory.status) + '</span>');
                $('#detailProductDescription').text(item.Description || item.Desciption || 'No description');
                $('#detailProductPrice').text(item.Price ? Number(item.Price).toFixed(2) : '0.00');
                $('#detailLastUpdated').text(inventory.lastUpdated ? new Date(inventory.lastUpdated).toLocaleString() : '-');
                $('#detailCreatedAt').text(item.createdAt ? new Date(item.createdAt).toLocaleString() : '-');
                
                $('#inventoryDetailsModal').modal('show');
            }
        }

        // Quick update from details
        function quickUpdateFromDetails() {
            if (currentProductDetails) {
                const inventory = currentProductDetails.inventory || {};
                quickUpdateStock(
                    currentProductDetails._id,
                    currentProductDetails.name,
                    inventory.quantity || 0
                );
                $('#inventoryDetailsModal').modal('hide');
            }
        }

        // Load stock history (placeholder for future implementation)
        function loadStockHistory(productId) {
            showAlert('Stock history feature coming soon!', 'info');
        }

        // Show alert message
        function showAlert(message, type) {
            const alertClass = type === 'success' ? 'alert-success' : 
                             type === 'danger' ? 'alert-danger' :
                             type === 'warning' ? 'alert-warning' : 'alert-info';
            const alertId = 'alert-' + Date.now();
            const alertHtml = '<div id="' + alertId + '" class="alert ' + alertClass + ' alert-floating alert-dismissible fade show" role="alert">' +
                message +
                '<button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>';
            
            $('.alert-floating').remove();
            $('body').append(alertHtml);
            
            setTimeout(function() {
                const $alert = $('#' + alertId);
                if ($alert.length) {
                    try {
                        $alert.alert('close');
                    } catch (e) {
                        $alert.remove();
                    }
                }
            }, 5000);
        }
    </script>
