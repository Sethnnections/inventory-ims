<div class="d-flex justify-content-between align-items-center mb-4">
    <h2>
        <i class="fas fa-users-cog"></i> User Management
    </h2>
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createUserModal">
        <i class="fas fa-user-plus"></i> Create User
    </button>
</div>

<!-- Users Table -->
<div class="card">
    <div class="card-header">
        <h5 class="card-title mb-0">
            <i class="fas fa-list"></i> All Users
        </h5>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped" id="usersTable">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Role</th>
                        <th>Created</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="usersTableBody">
                    <!-- Users will be loaded here -->
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Create User Modal -->
<div class="modal fade" id="createUserModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createUserForm">
                    <div class="mb-3">
                        <label for="name" class="form-label">Full Name</label>
                        <input type="text" class="form-control" id="name" name="name" required>
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <input type="email" class="form-control" id="email" name="email" required>
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input type="password" class="form-control" id="password" name="password" required minlength="6">
                    </div>
                    <div class="mb-3">
                        <label for="role" class="form-label">Role</label>
                        <select class="form-select" id="role" name="role" required>
                            <option value="">Select Role</option>
                            <option value="staff">Staff</option>
                            <option value="manager">Manager</option>
                            <option value="admin">Admin</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="createUser()">Create User</button>
            </div>
        </div>
    </div>
</div>

<script>
// Load all users
async function loadUsers() {
    try {
        const [staffRes, managerRes, adminRes] = await Promise.all([
            fetch('/api/auth/staffuser'),
            fetch('/api/auth/manageruser'),
            fetch('/api/auth/adminuser')
        ]);

        const staffUsers = await staffRes.json();
        const managerUsers = await managerRes.json();
        const adminUsers = await adminRes.json();

        const allUsers = [...staffUsers, ...managerUsers, ...adminUsers];
        displayUsers(allUsers);

    } catch (error) {
        console.error('Error loading users:', error);
        showAlert('Error loading users', 'danger');
    }
}

// Display users in table
function displayUsers(users) {
    const tbody = document.getElementById('usersTableBody');
    tbody.innerHTML = '';

    users.forEach(user => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>
                ${user.ProfilePic ? 
                    `<img src="${user.ProfilePic}" alt="${user.name}" class="rounded-circle me-2" width="30" height="30">` : 
                    `<i class="fas fa-user-circle me-2"></i>`
                }
                ${user.name}
            </td>
            <td>${user.email}</td>
            <td>
                <span class="badge bg-${getRoleBadgeColor(user.role)}">
                    ${user.role}
                </span>
            </td>
            <td>${new Date(user.createdAt).toLocaleDateString()}</td>
            <td>
                ${user._id !== '<%= user.id %>' ? 
                    `<button class="btn btn-danger btn-sm" onclick="deleteUser('${user._id}', '${user.name}')">
                        <i class="fas fa-trash"></i> Delete
                    </button>` : 
                    '<span class="text-muted">Current User</span>'
                }
            </td>
        `;
        tbody.appendChild(row);
    });
}

// Get badge color based on role
function getRoleBadgeColor(role) {
    switch(role) {
        case 'admin': return 'danger';
        case 'manager': return 'warning';
        case 'staff': return 'info';
        default: return 'secondary';
    }
}

// Create new user
async function createUser() {
    const form = document.getElementById('createUserForm');
    const formData = new FormData(form);
    
    const userData = {
        name: formData.get('name'),
        email: formData.get('email'),
        password: formData.get('password'),
        role: formData.get('role')
    };

    try {
        const response = await fetch('/api/auth/signup', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(userData)
        });

        const data = await response.json();

        if (response.ok) {
            showAlert('User created successfully!', 'success');
            $('#createUserModal').modal('hide');
            form.reset();
            loadUsers(); // Reload users
        } else {
            showAlert(data.error || 'Error creating user', 'danger');
        }
    } catch (error) {
        showAlert('Network error. Please try again.', 'danger');
    }
}

// Delete user
async function deleteUser(userId, userName) {
    if (!confirm(`Are you sure you want to delete user: ${userName}?`)) {
        return;
    }

    try {
        const response = await fetch(`/api/auth/removeuser/${userId}`, {
            method: 'DELETE'
        });

        const data = await response.json();

        if (response.ok) {
            showAlert('User deleted successfully!', 'success');
            loadUsers(); // Reload users
        } else {
            showAlert(data.message || 'Error deleting user', 'danger');
        }
    } catch (error) {
        showAlert('Network error. Please try again.', 'danger');
    }
}

// Load users when page loads
document.addEventListener('DOMContentLoaded', loadUsers);
</script>