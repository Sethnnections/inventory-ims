
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- DataTables CSS -->
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.bootstrap5.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/responsive/2.5.0/css/responsive.bootstrap5.min.css">
    
    <style>
       
        .card-stats .icon-shape {
            width: 48px;
            height: 48px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .table th {
            border-top: none;
            font-weight: 600;
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        .badge {
            font-size: 0.75rem;
            padding: 0.35em 0.65em;
        }
        .container-fluid {
            max-width: 1400px;
            padding: 2rem;
        }
        .card {
            border: none;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }
    </style>

        <div class="d-flex justify-content-between align-items-center mb-4">
         
            <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#createUserModal">
                <i class="fas fa-user-plus me-2"></i>Create User
            </button>
        </div>

        <!-- Alert Container -->
        <div id="alertContainer"></div>

        <!-- Stats Cards -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card card-stats">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="icon icon-shape bg-primary text-white rounded-circle shadow">
                                <i class="fas fa-users"></i>
                            </div>
                            <div class="ms-3">
                                <p class="card-title text-sm mb-0">Total Users</p>
                                <h3 class="card-text fw-bold" id="totalUsersCount">0</h3>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card card-stats">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="icon icon-shape bg-success text-white rounded-circle shadow">
                                <i class="fas fa-user-shield"></i>
                            </div>
                            <div class="ms-3">
                                <p class="card-title text-sm mb-0">Admins</p>
                                <h3 class="card-text fw-bold" id="adminUsersCount">0</h3>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card card-stats">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="icon icon-shape bg-warning text-white rounded-circle shadow">
                                <i class="fas fa-user-tie"></i>
                            </div>
                            <div class="ms-3">
                                <p class="card-title text-sm mb-0">Managers</p>
                                <h3 class="card-text fw-bold" id="managerUsersCount">0</h3>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card card-stats">
                    <div class="card-body">
                        <div class="d-flex align-items-center">
                            <div class="icon icon-shape bg-info text-white rounded-circle shadow">
                                <i class="fas fa-user"></i>
                            </div>
                            <div class="ms-3">
                                <p class="card-title text-sm mb-0">Staff</p>
                                <h3 class="card-text fw-bold" id="staffUsersCount">0</h3>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Users Table -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">
                    <i class="fas fa-list me-2"></i>Users List
                </h5>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-secondary btn-sm" onclick="refreshUsers()" title="Refresh">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                    <div class="btn-group">
                        <button type="button" class="btn btn-outline-primary btn-sm dropdown-toggle" data-bs-toggle="dropdown">
                            <i class="fas fa-download me-1"></i>Export
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="#" onclick="exportToCSV()"><i class="fas fa-file-csv me-2"></i>CSV</a></li>
                            <li><a class="dropdown-item" href="#" onclick="printTable()"><i class="fas fa-print me-2"></i>Print</a></li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover w-100" id="usersDataTable">
                        <thead class="table-light">
                            <tr>
                                <th width="5%">#</th>
                                <th width="10%">Profile</th>
                                <th width="20%">Name</th>
                                <th width="20%">Email</th>
                                <th width="15%">Role</th>
                                <th width="10%">Status</th>
                                <th width="15%">Created</th>
                                <th width="5%">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="usersTableBody">
                            <tr>
                                <td colspan="8" class="text-center py-4">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading users...</span>
                                    </div>
                                    <div class="mt-2 text-muted">Loading users...</div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                
                <!-- Custom Pagination -->
                <div class="d-flex justify-content-between align-items-center mt-3" id="customPagination" style="display: none !important;">
                    <div class="text-muted" id="paginationInfo">
                        Showing 0 to 0 of 0 entries
                    </div>
                    <nav>
                        <ul class="pagination pagination-sm mb-0" id="paginationControls"></ul>
                    </nav>
                </div>
            </div>
        </div>

    <!-- Create User Modal -->
    <div class="modal fade" id="createUserModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="createUserForm">
                        <div class="mb-3">
                            <label for="name" class="form-label">Full Name *</label>
                            <input type="text" class="form-control" id="name" name="name" required>
                            <div class="form-text">Enter the user's full name</div>
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label">Email *</label>
                            <input type="email" class="form-control" id="email" name="email" required>
                            <div class="form-text">This will be used for login</div>
                        </div>
                        <div class="mb-3">
                            <label for="password" class="form-label">Password *</label>
                            <input type="password" class="form-control" id="password" name="password" required minlength="6">
                            <div class="form-text">Minimum 6 characters</div>
                        </div>
                        <div class="mb-3">
                            <label for="role" class="form-label">Role *</label>
                            <select class="form-select" id="role" name="role" required>
                                <option value="">Select Role</option>
                                <option value="staff">Staff</option>
                                <option value="manager">Manager</option>
                                <option value="admin">Admin</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="createUserBtn" onclick="createUser()">
                        <span class="spinner-border spinner-border-sm d-none" role="status"></span>
                        Create User
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit User Modal -->
    <div class="modal fade" id="editUserModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editUserForm">
                        <input type="hidden" id="editUserId" name="id">
                        <div class="mb-3">
                            <label for="editName" class="form-label">Full Name *</label>
                            <input type="text" class="form-control" id="editName" name="name" required>
                        </div>
                        <div class="mb-3">
                            <label for="editEmail" class="form-label">Email *</label>
                            <input type="email" class="form-control" id="editEmail" name="email" required>
                        </div>
                        <div class="mb-3">
                            <label for="editRole" class="form-label">Role *</label>
                            <select class="form-select" id="editRole" name="role" required>
                                <option value="staff">Staff</option>
                                <option value="manager">Manager</option>
                                <option value="admin">Admin</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="updateUserBtn" onclick="updateUser()">
                        <span class="spinner-border spinner-border-sm d-none" role="status"></span>
                        Update User
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete User Modal -->
    <div class="modal fade" id="deleteUserModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-danger">Confirm Deletion</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete user: <strong id="deleteUserName"></strong>?</p>
                    <p class="text-danger">This action cannot be undone and will permanently remove the user from the system.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteBtn" onclick="confirmDelete()">
                        <span class="spinner-border spinner-border-sm d-none" role="status"></span>
                        Delete User
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.1/js/dataTables.buttons.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.bootstrap5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.html5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.4.1/js/buttons.print.min.js"></script>
    <script src="https://cdn.datatables.net/responsive/2.5.0/js/dataTables.responsive.min.js"></script>
    <script src="https://cdn.datatables.net/responsive/2.5.0/js/responsive.bootstrap5.min.js"></script>

    <script>
        // Global variables
        let allUsers = [];
        let userToDelete = null;
        let currentUserId = 'demo-user-id'; // In production, this would come from your session
        let usersDataTable = null;
        let currentPage = 1;
        const pageSize = 10;

        // Demo data for standalone testing
        const demoUsers = [
            { _id: '1', name: 'John Doe', email: 'john@example.com', role: 'admin', ProfilePic: null, createdAt: '2024-01-15' },
            { _id: '2', name: 'Jane Smith', email: 'jane@example.com', role: 'manager', ProfilePic: null, createdAt: '2024-02-20' },
            { _id: '3', name: 'Bob Johnson', email: 'bob@example.com', role: 'staff', ProfilePic: null, createdAt: '2024-03-10' },
            { _id: '4', name: 'Alice Williams', email: 'alice@example.com', role: 'staff', ProfilePic: null, createdAt: '2024-04-05' },
            { _id: '5', name: 'Charlie Brown', email: 'charlie@example.com', role: 'manager', ProfilePic: null, createdAt: '2024-05-12' }
        ];

        // Utility functions
        function escapeHtml(text) {
            const map = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#039;'
            };
            return text ? text.replace(/[&<>"']/g, m => map[m]) : '';
        }

        function getRoleBadgeColor(role) {
            const colors = {
                'admin': 'danger',
                'manager': 'warning',
                'staff': 'info'
            };
            return colors[role] || 'secondary';
        }

        function getRoleIcon(role) {
            const icons = {
                'admin': 'user-shield',
                'manager': 'user-tie',
                'staff': 'user'
            };
            return icons[role] || 'user';
        }

        function showAlert(message, type = 'success') {
            const alertContainer = document.getElementById('alertContainer');
            const alert = document.createElement('div');
            alert.className = `alert alert-${type} alert-dismissible fade show`;
            alert.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            alertContainer.appendChild(alert);
            
            setTimeout(() => {
                alert.classList.remove('show');
                setTimeout(() => alert.remove(), 150);
            }, 3000);
        }

        function isDataTablesLoaded() {
            return typeof $.fn.DataTable === 'function';
        }

        // Initialize DataTables
        function initializeDataTable() {
            if (!isDataTablesLoaded()) {
                console.warn('DataTables not loaded, using custom pagination');
                initializeCustomPagination();
                return;
            }

            try {
                usersDataTable = $('#usersDataTable').DataTable({
                    processing: true,
                    serverSide: false,
                    responsive: true,
                    ordering: true,
                    order: [[2, 'asc']],
                    pageLength: pageSize,
                    lengthMenu: [[10, 25, 50, 100], [10, 25, 50, 100]],
                    dom: '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>rt<"row"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>',
                    language: {
                        search: "_INPUT_",
                        searchPlaceholder: "Search users...",
                        lengthMenu: "Show _MENU_ entries",
                        info: "Showing _START_ to _END_ of _TOTAL_ users",
                        infoEmpty: "Showing 0 to 0 of 0 users",
                        infoFiltered: "(filtered from _MAX_ total users)",
                        paginate: {
                            first: "First",
                            last: "Last",
                            next: "Next",
                            previous: "Previous"
                        }
                    },
                    columns: [
                        { 
                            data: null,
                            render: function(data, type, row, meta) {
                                return meta.row + meta.settings._iDisplayStart + 1;
                            },
                            orderable: false
                        },
                        {
                            data: 'ProfilePic',
                            render: function(data, type, row) {
                                if (data) {
                                    return `<img src="${data}" alt="${row.name}" class="rounded-circle" width="40" height="40" style="object-fit: cover;">`;
                                } else {
                                    return `<div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                        <i class="fas fa-user text-white"></i>
                                    </div>`;
                                }
                            },
                            orderable: false
                        },
                        { 
                            data: 'name',
                            render: function(data, type, row) {
                                return `<div class="fw-bold">${escapeHtml(data)}</div>`;
                            }
                        },
                        { 
                            data: 'email',
                            render: function(data) {
                                return escapeHtml(data);
                            }
                        },
                        { 
                            data: 'role',
                            render: function(data) {
                                return `<span class="badge bg-${getRoleBadgeColor(data)}">
                                    <i class="fas fa-${getRoleIcon(data)} me-1"></i>
                                    ${data.charAt(0).toUpperCase() + data.slice(1)}
                                </span>`;
                            }
                        },
                        {
                            data: null,
                            render: function(data) {
                                return `<span class="badge bg-success">
                                    <i class="fas fa-check-circle me-1"></i>
                                    Active
                                </span>`;
                            }
                        },
                        { 
                            data: 'createdAt',
                            render: function(data) {
                                return data ? new Date(data).toLocaleDateString('en-US', {
                                    year: 'numeric',
                                    month: 'short',
                                    day: 'numeric'
                                }) : 'Unknown';
                            }
                        },
                        {
                            data: '_id',
                            render: function(data, type, row) {
                                const isCurrentUser = data === currentUserId;
                                return `
                                    <div class="btn-group btn-group-sm">
                                        <button class="btn btn-outline-primary" onclick="editUser('${data}')" 
                                                ${isCurrentUser ? 'disabled' : ''}
                                                title="Edit User">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-outline-danger" onclick="showDeleteConfirmation('${data}', '${escapeHtml(row.name)}')"
                                                ${isCurrentUser ? 'disabled' : ''}
                                                title="Delete User">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                    ${isCurrentUser ? '<small class="text-muted d-block mt-1">You</small>' : ''}
                                `;
                            },
                            orderable: false
                        }
                    ]
                });
                
                document.getElementById('customPagination').style.display = 'none';
                
            } catch (error) {
                console.error('DataTables initialization failed:', error);
                initializeCustomPagination();
            }
        }

        function initializeCustomPagination() {
            console.log('Initializing custom pagination');
            document.getElementById('customPagination').style.display = 'flex';
        }

        // Load users
        async function loadUsers() {
            try {
                showLoadingState();
                
                // Try to fetch from API, fallback to demo data
                try {
                    const [staffRes, managerRes, adminRes] = await Promise.all([
                        fetch('/api/auth/staffuser'),
                        fetch('/api/auth/manageruser'),
                        fetch('/api/auth/adminuser')
                    ]);

                    if (staffRes.ok && managerRes.ok && adminRes.ok) {
                        const staffData = await staffRes.json();
                        const managerData = await managerRes.json();
                        const adminData = await adminRes.json();

                        const staffUsers = Array.isArray(staffData) ? staffData : [];
                        const managerUsers = Array.isArray(managerData) ? managerData : [];
                        const adminUsers = Array.isArray(adminData) ? adminData : [];

                        allUsers = [...staffUsers, ...managerUsers, ...adminUsers];
                    } else {
                        throw new Error('API not available');
                    }
                } catch (apiError) {
                    console.log('Using demo data');
                    allUsers = [...demoUsers];
                }
                
                updateUserStats(allUsers);
                
                if (!usersDataTable) {
                    initializeDataTable();
                }
                
                if (usersDataTable && isDataTablesLoaded()) {
                    usersDataTable.clear();
                    usersDataTable.rows.add(allUsers);
                    usersDataTable.draw();
                } else {
                    displayUsersWithPagination(allUsers);
                }

            } catch (error) {
                console.error('Error loading users:', error);
                showAlert('Error loading users. Showing demo data.', 'warning');
                allUsers = [...demoUsers];
                updateUserStats(allUsers);
                displayUsersWithPagination(allUsers);
            }
        }

        function displayUsersWithPagination(users, page = 1) {
            const tbody = document.getElementById('usersTableBody');
            const startIndex = (page - 1) * pageSize;
            const endIndex = Math.min(startIndex + pageSize, users.length);
            const paginatedUsers = users.slice(startIndex, endIndex);

            if (paginatedUsers.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="8" class="text-center text-muted py-4">
                            <i class="fas fa-users fa-2x mb-3 d-block"></i>
                            No users found
                        </td>
                    </tr>
                `;
                return;
            }

            tbody.innerHTML = paginatedUsers.map((user, index) => {
                const userId = user._id || user.id;
                const userName = user.name || 'Unknown';
                const userEmail = user.email || 'No email';
                const userRole = user.role || 'staff';
                const userProfilePic = user.ProfilePic;
                const createdAt = user.createdAt ? new Date(user.createdAt).toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric'
                }) : 'Unknown';
                const isCurrentUser = userId === currentUserId;

                return `
                    <tr>
                        <td>${startIndex + index + 1}</td>
                        <td>
                            ${userProfilePic ? 
                                `<img src="${userProfilePic}" alt="${userName}" class="rounded-circle" width="40" height="40" style="object-fit: cover;">` : 
                                `<div class="bg-secondary rounded-circle d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                    <i class="fas fa-user text-white"></i>
                                </div>`
                            }
                        </td>
                        <td>
                            <div class="fw-bold">${escapeHtml(userName)}</div>
                        </td>
                        <td>${escapeHtml(userEmail)}</td>
                        <td>
                            <span class="badge bg-${getRoleBadgeColor(userRole)}">
                                <i class="fas fa-${getRoleIcon(userRole)} me-1"></i>
                                ${userRole.charAt(0).toUpperCase() + userRole.slice(1)}
                            </span>
                        </td>
                        <td>
                            <span class="badge bg-success">
                                <i class="fas fa-check-circle me-1"></i>
                                Active
                            </span>
                        </td>
                        <td>${createdAt}</td>
                        <td>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-primary" onclick="editUser('${userId}')" 
                                        ${isCurrentUser ? 'disabled' : ''}
                                        title="Edit User">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-outline-danger" onclick="showDeleteConfirmation('${userId}', '${escapeHtml(userName)}')"
                                        ${isCurrentUser ? 'disabled' : ''}
                                        title="Delete User">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                            ${isCurrentUser ? '<small class="text-muted d-block mt-1">You</small>' : ''}
                        </td>
                    </tr>
                `;
            }).join('');

            updateCustomPagination(users.length, page);
        }

        function updateCustomPagination(totalItems, currentPage) {
            const totalPages = Math.ceil(totalItems / pageSize);
            const paginationInfo = document.getElementById('paginationInfo');
            const paginationControls = document.getElementById('paginationControls');
            
            const startItem = (currentPage - 1) * pageSize + 1;
            const endItem = Math.min(currentPage * pageSize, totalItems);
            
            paginationInfo.textContent = `Showing ${startItem} to ${endItem} of ${totalItems} entries`;
            
            let paginationHTML = '';
            
            if (currentPage > 1) {
                paginationHTML += `<li class="page-item"><a class="page-link" href="#" onclick="changePage(${currentPage - 1}); return false;">Previous</a></li>`;
            } else {
                paginationHTML += `<li class="page-item disabled"><a class="page-link" href="#">Previous</a></li>`;
            }
            
            for (let i = 1; i <= totalPages; i++) {
                if (i === currentPage) {
                    paginationHTML += `<li class="page-item active"><a class="page-link" href="#">${i}</a></li>`;
                } else {
                    paginationHTML += `<li class="page-item"><a class="page-link" href="#" onclick="changePage(${i}); return false;">${i}</a></li>`;
                }
            }
            
            if (currentPage < totalPages) {
                paginationHTML += `<li class="page-item"><a class="page-link" href="#" onclick="changePage(${currentPage + 1}); return false;">Next</a></li>`;
            } else {
                paginationHTML += `<li class="page-item disabled"><a class="page-link" href="#">Next</a></li>`;
            }
            
            paginationControls.innerHTML = paginationHTML;
        }

        function changePage(page) {
            currentPage = page;
            displayUsersWithPagination(allUsers, page);
        }

        function updateUserStats(users) {
            const totalUsers = users.length;
            const adminUsers = users.filter(user => user.role === 'admin').length;
            const managerUsers = users.filter(user => user.role === 'manager').length;
            const staffUsers = users.filter(user => user.role === 'staff').length;

            document.getElementById('totalUsersCount').textContent = totalUsers;
            document.getElementById('adminUsersCount').textContent = adminUsers;
            document.getElementById('managerUsersCount').textContent = managerUsers;
            document.getElementById('staffUsersCount').textContent = staffUsers;
        }

        function refreshUsers() {
            loadUsers();
            showAlert('Users list refreshed', 'info');
        }

        function exportToCSV() {
            const headers = ['Name', 'Email', 'Role', 'Status', 'Created'];
            const csvData = allUsers.map(user => [
                user.name,
                user.email,
                user.role,
                'Active',
                user.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'Unknown'
            ]);
            
            let csvContent = 'data:text/csv;charset=utf-8,';
            csvContent += headers.join(',') + '\n';
            csvContent += csvData.map(row => row.map(field => `"${field}"`).join(',')).join('\n');
            
            const encodedUri = encodeURI(csvContent);
            const link = document.createElement('a');
            link.setAttribute('href', encodedUri);
            link.setAttribute('download', 'users.csv');
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            showAlert('Users exported to CSV', 'success');
        }

        function printTable() {
            const printWindow = window.open('', '_blank');
            printWindow.document.write(`
                <html>
                    <head>
                        <title>Users List</title>
                        <style>
                            body { font-family: Arial, sans-serif; padding: 20px; }
                            h2 { color: #333; }
                            table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                            th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }
                            th { background-color: #f8f9fa; font-weight: bold; }
                            tr:nth-child(even) { background-color: #f9f9f9; }
                        </style>
                    </head>
                    <body>
                        <h2>Users List</h2>
                        <p>Generated on: ${new Date().toLocaleString()}</p>
                        <table>
                            <thead>
                                <tr>
                                    <th>#</th>
                                    <th>Name</th>
                                    <th>Email</th>
                                    <th>Role</th>
                                    <th>Status</th>
                                    <th>Created</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${allUsers.map((user, index) => `
                                    <tr>
                                        <td>${index + 1}</td>
                                        <td>${escapeHtml(user.name)}</td>
                                        <td>${escapeHtml(user.email)}</td>
                                        <td>${user.role.charAt(0).toUpperCase() + user.role.slice(1)}</td>
                                        <td>Active</td>
                                        <td>${user.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'Unknown'}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </body>
                </html>
            `);
            printWindow.document.close();
            setTimeout(() => {
                printWindow.print();
            }, 250);
        }

        function showLoadingState() {
            const tbody = document.getElementById('usersTableBody');
            tbody.innerHTML = `
                <tr>
                    <td colspan="8" class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading users...</span>
                        </div>
                        <div class="mt-2 text-muted">Loading users...</div>
                    </td>
                </tr>
            `;
        }

        function displayErrorState() {
            const tbody = document.getElementById('usersTableBody');
            tbody.innerHTML = `
                <tr>
                    <td colspan="8" class="text-center py-4">
                        <i class="fas fa-exclamation-triangle fa-2x text-danger mb-3"></i>
                        <div>Failed to load users</div>
                        <button class="btn btn-primary mt-2" onclick="loadUsers()">
                            <i class="fas fa-redo"></i> Try Again
                        </button>
                    </td>
                </tr>
            `;
        }

        // Create user
        async function createUser() {
            const form = document.getElementById('createUserForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const btn = document.getElementById('createUserBtn');
            const spinner = btn.querySelector('.spinner-border');
            
            const formData = {
                name: document.getElementById('name').value,
                email: document.getElementById('email').value,
                password: document.getElementById('password').value,
                role: document.getElementById('role').value
            };

            btn.disabled = true;
            spinner.classList.remove('d-none');

            try {
                const response = await fetch('/api/auth/register', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                });

                if (response.ok) {
                    showAlert('User created successfully!', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('createUserModal')).hide();
                    form.reset();
                    loadUsers();
                } else {
                    const error = await response.json();
                    showAlert(error.message || 'Failed to create user', 'danger');
                }
            } catch (error) {
                console.error('Error:', error);
                // Demo mode: add user to local array
                const newUser = {
                    _id: Date.now().toString(),
                    ...formData,
                    createdAt: new Date().toISOString(),
                    ProfilePic: null
                };
                delete newUser.password;
                allUsers.push(newUser);
                showAlert('User created successfully! (Demo mode)', 'success');
                bootstrap.Modal.getInstance(document.getElementById('createUserModal')).hide();
                form.reset();
                loadUsers();
            } finally {
                btn.disabled = false;
                spinner.classList.add('d-none');
            }
        }

        // Edit user
        function editUser(userId) {
            const user = allUsers.find(u => (u._id || u.id) === userId);
            if (!user) {
                showAlert('User not found', 'danger');
                return;
            }

            document.getElementById('editUserId').value = userId;
            document.getElementById('editName').value = user.name;
            document.getElementById('editEmail').value = user.email;
            document.getElementById('editRole').value = user.role;

            const modal = new bootstrap.Modal(document.getElementById('editUserModal'));
            modal.show();
        }

        // Update user
        async function updateUser() {
            const form = document.getElementById('editUserForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            const btn = document.getElementById('updateUserBtn');
            const spinner = btn.querySelector('.spinner-border');
            
            const userId = document.getElementById('editUserId').value;
            const formData = {
                name: document.getElementById('editName').value,
                email: document.getElementById('editEmail').value,
                role: document.getElementById('editRole').value
            };

            btn.disabled = true;
            spinner.classList.remove('d-none');

            try {
                const response = await fetch(`/api/auth/update/${userId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData)
                });

                if (response.ok) {
                    showAlert('User updated successfully!', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('editUserModal')).hide();
                    loadUsers();
                } else {
                    const error = await response.json();
                    showAlert(error.message || 'Failed to update user', 'danger');
                }
            } catch (error) {
                console.error('Error:', error);
                // Demo mode: update user in local array
                const userIndex = allUsers.findIndex(u => (u._id || u.id) === userId);
                if (userIndex !== -1) {
                    allUsers[userIndex] = { ...allUsers[userIndex], ...formData };
                    showAlert('User updated successfully! (Demo mode)', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('editUserModal')).hide();
                    loadUsers();
                } else {
                    showAlert('Failed to update user', 'danger');
                }
            } finally {
                btn.disabled = false;
                spinner.classList.add('d-none');
            }
        }

        // Show delete confirmation
        function showDeleteConfirmation(userId, userName) {
            userToDelete = userId;
            document.getElementById('deleteUserName').textContent = userName;
            const modal = new bootstrap.Modal(document.getElementById('deleteUserModal'));
            modal.show();
        }

        // Confirm delete
        async function confirmDelete() {
            if (!userToDelete) return;

            const btn = document.getElementById('confirmDeleteBtn');
            const spinner = btn.querySelector('.spinner-border');
            
            btn.disabled = true;
            spinner.classList.remove('d-none');

            try {
                const response = await fetch(`/api/auth/delete/${userToDelete}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    showAlert('User deleted successfully!', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('deleteUserModal')).hide();
                    userToDelete = null;
                    loadUsers();
                } else {
                    const error = await response.json();
                    showAlert(error.message || 'Failed to delete user', 'danger');
                }
            } catch (error) {
                console.error('Error:', error);
                // Demo mode: remove user from local array
                const userIndex = allUsers.findIndex(u => (u._id || u.id) === userToDelete);
                if (userIndex !== -1) {
                    allUsers.splice(userIndex, 1);
                    showAlert('User deleted successfully! (Demo mode)', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('deleteUserModal')).hide();
                    userToDelete = null;
                    loadUsers();
                } else {
                    showAlert('Failed to delete user', 'danger');
                }
            } finally {
                btn.disabled = false;
                spinner.classList.add('d-none');
            }
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Page loaded, initializing...');
            console.log('jQuery:', typeof $ !== 'undefined' ? 'Loaded' : 'Not loaded');
            console.log('DataTables:', isDataTablesLoaded() ? 'Loaded' : 'Not loaded');
            
            loadUsers();

            // Reset forms when modals are hidden
            document.getElementById('createUserModal').addEventListener('hidden.bs.modal', function () {
                document.getElementById('createUserForm').reset();
            });

            document.getElementById('editUserModal').addEventListener('hidden.bs.modal', function () {
                document.getElementById('editUserForm').reset();
            });
        });
    </script>
