<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title><%= title %> - Inventory System</title>

  <!-- Bootstrap & FontAwesome -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />

  <style>
    :root {
      --dark-green: #1b4332;
      --gold: #d4af37;
      --white: #ffffff;
    }

    body {
      margin: 0;
      font-family: 'Poppins', 'Segoe UI', Tahoma, sans-serif;
      height: 100vh;
      background: linear-gradient(135deg, var(--dark-green) 50%, var(--white) 50%);
      display: flex;
      align-items: center;
      justify-content: center;
      overflow: hidden;
      position: relative;
    }

    /* Subtle moving background pattern */
    body::before {
      content: '';
      position: absolute;
      inset: 0;
      background: repeating-linear-gradient(
        -45deg,
        rgba(255, 255, 255, 0.04),
        rgba(255, 255, 255, 0.04) 15px,
        transparent 15px,
        transparent 30px
      );
      animation: moveBackground 10s linear infinite;
      z-index: 0;
    }

    @keyframes moveBackground {
      0% { background-position: 0 0; }
      100% { background-position: 100px 100px; }
    }

    .login-card {
      background: rgba(255, 255, 255, 0.9);
      border-radius: 20px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
      padding: 3rem 3.5rem;
      width: 100%;
      max-width: 460px;
      text-align: center;
      position: relative;
      z-index: 2;
      animation: fadeIn 0.8s ease-out;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .logo i {
      font-size: 3.5rem;
      color: var(--white);
      background-color: var(--dark-green);
      border-radius: 50%;
      padding: 1rem;
      box-shadow: 0 0 10px rgba(27, 67, 50, 0.4);
    }

    .logo h1 {
      color: var(--dark-green);
      font-weight: 700;
      font-size: 1.8rem;
      margin-top: 1rem;
    }

    /* Line input styling */
    .form-group {
      position: relative;
      margin-bottom: 2rem;
      width: 100%;
    }

    .form-group input {
      width: 100%;
      border: none;
      border-bottom: 2px solid #ccc;
      background: transparent;
      padding: 0.8rem 0.5rem 0.4rem 2.5rem;
      font-size: 1rem;
      color: #333;
      transition: border-color 0.3s ease;
    }

    .form-group input:focus {
      outline: none;
      border-color: var(--gold);
    }

    .form-group i {
      position: absolute;
      left: 0;
      top: 50%;
      transform: translateY(-50%);
      color: var(--dark-green);
      font-size: 1.1rem;
    }

    .btn-login {
      background: var(--gold);
      color: var(--white);
      border: none;
      padding: 0.9rem;
      border-radius: 50px;
      font-weight: 600;
      width: 100%;
      font-size: 1.05rem;
      transition: all 0.3s ease;
    }

    .btn-login:hover {
      background: #22543d;
      box-shadow: 0 5px 15px rgba(27, 67, 50, 0.3);
      transform: translateY(-2px);
    }

    .alert {
      border-radius: 10px;
      border-left: 4px solid var(--gold);
      font-size: 0.9rem;
      text-align: left;
    }

    footer {
      position: absolute;
      bottom: 15px;
      font-size: 0.8rem;
      color: rgba(255, 255, 255, 0.8);
      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }
  </style>
</head>
<body>
  <div class="login-card">
    <div class="logo">
        <img src="/images/logo.png" alt="Logo" style="width:172px; height:172px; object-fit:contain;">

      <h1>Mangochi Inventory</h1>
    </div>

    <% if (typeof alertMessage !== 'undefined' && alertMessage) { %>
      <div class="alert alert-<%= alertType || 'warning' %> alert-dismissible fade show mb-4" role="alert">
        <i class="fas fa-<%= alertType === 'success' ? 'check' : 'exclamation-triangle' %> me-2"></i>
        <%= alertMessage %>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      </div>
    <% } %>

    <form id="loginForm">
      <div class="form-group">
        <i class="fas fa-envelope"></i>
        <input type="email" id="email" name="email" placeholder="Email Address" required>
      </div>

      <div class="form-group">
        <i class="fas fa-lock"></i>
        <input type="password" id="password" name="password" placeholder="Password" required>
      </div>

      <button type="submit" class="btn btn-login">
        <i class="fas fa-sign-in-alt me-2"></i> Sign In
      </button>
    </form>

    <div id="alertContainer" class="mt-3"></div>
  </div>

  <footer>&copy; <%= new Date().getFullYear() %> Mangochi Inventory System. All rights reserved.</footer>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <script>
    document.getElementById('loginForm').addEventListener('submit', async (e) => {
      e.preventDefault();

      const submitBtn = e.target.querySelector('button[type="submit"]');
      const originalText = submitBtn.innerHTML;
      submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i> Signing In...';
      submitBtn.disabled = true;

      const formData = {
        email: document.getElementById('email').value,
        password: document.getElementById('password').value
      };

      try {
        const response = await fetch('/api/auth/login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData)
        });

        const data = await response.json();
      // persist token & basic user info from response
      if (data && data.user && data.user.token) {
        const { token, id, name, email, role, ProfilePic } = data.user;

        // store token (or use sessionStorage if you prefer it to clear on tab close)
        localStorage.setItem('authToken', token);

        // store non-sensitive user info for UI
        localStorage.setItem('authUser', JSON.stringify({ id, name, email, role, ProfilePic }));

        // optional: helper to automatically include the token in future fetch requests
        window.authFetch = (input, init = {}) => {
          init.headers = Object.assign({}, init.headers, { 'Authorization': 'Bearer ' + token });
          return fetch(input, init);
        };
      }

        if (response.ok) {
          showAlert('Login successful!', 'success');
          setTimeout(() => window.location.href = '/dashboard', 1000);
        } else {
          showAlert(data.error || 'Invalid credentials', 'danger');
          resetBtn();
        }
      } catch (error) {
        showAlert('Network error', 'danger');
        resetBtn();
      }

      function resetBtn() {
        submitBtn.innerHTML = originalText;
        submitBtn.disabled = false;
      }
    });

    function showAlert(message, type) {
      const alertContainer = document.getElementById('alertContainer');
      alertContainer.innerHTML = `
        <div class="alert alert-${type} alert-dismissible fade show" role="alert">
          <i class="fas fa-${type === 'success' ? 'check' : 'exclamation-triangle'} me-2"></i>
          ${message}
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>`;
    }
  </script>
</body>
</html>
